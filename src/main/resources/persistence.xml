<?xml version="1.0" encoding="UTF-8"?>
<persistence version="2.0" xmlns="http://java.sun.com/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://java.sun.com/xml/ns/persistence http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd">
  <persistence-unit name="income" transaction-type="RESOURCE_LOCAL">
    <provider>org.eclipse.persistence.jpa.PersistenceProvider</provider>
    <non-jta-data-source/>
    <class>com.pamarin.income.model.User</class>
    <class>com.pamarin.income.model.IncomeItem</class>
    <class>com.pamarin.income.model.IncomeTag</class>
    <class>com.pamarin.income.model.Tag</class>
    <exclude-unlisted-classes>true</exclude-unlisted-classes>
    <properties>
      <!--
       OFF      : This setting disables the generation of the log output. You may want to set 
                  logging to OFF during production to avoid the overhead of logging.
       SEVERE   : This level enables reporting of failure cases only. Usually, if the failure occurs, 
                  the application stops.  
       WARNING  : This level enables logging of issues that have a potential to cause problems. 
                  For example, a setting that is picked by the application and not by the user.       
       INFO     : This level enables the standard output. The contents of this output is very limited. 
                  It is the default logging level if a logging level is not set.     
       CONFIG   : This level enables logging of such configuration details as your database login information 
                  and some metadata information. You may want to use the CONFIG log level at deployment time.     
       FINE     : This level enables logging of the first level of the debugging information and SQL. 
                  You may want to use this log level during debugging and testing, but not at production. 
       FINER    : This level enables logging of more debugging information than the FINE setting. 
                  For example, the transaction information is logged at this level. 
                  You may want to use this log level during debugging and testing, but not at production. 
       FINEST   : This level enables logging of more debugging information than the FINER setting, 
                  such as a very detailed information about certain features (for example, sequencing). 
                  You may want to use this log level during debugging and testing, but not at production.     
       ALL      : This level currently logs at the same level as FINEST.                                                        
       -->
      <property name="eclipselink.logging.level" value="FINEST"/>
      <property name="eclipselink.logging.timestamp" value="false"/>
      <property name="eclipselink.logging.session" value="false"/>
      <property name="eclipselink.logging.thread" value="false"/>
      <property name="eclipselink.logging.parameters" value="true"/>
      <!--
      By default EclipseLink uses a shared object cache, that caches a subset of all objects read 
      and persisted for the persistence unit. The EclipseLink shared cache differs from the local EntityManager cache. 
      The shared cache exists for the duration of the persistence unit (EntityManagerFactory, or server) 
      and is shared by all EntityManagers and users of the persistence unit. The local EntityManager cache 
      is not shared, and only exists for the duration of the EntityManager or transaction.
      The benefit of the shared cache, is that once an object has been read, 
      if it is read again using the find operation, the database does not need to be accessed. 
      Also if the object is read through any Query, it will not need to be rebuilt, 
      and its relationships will not need to be re-fetched.
      The limitation of the shared cache, is that if the database is changed directly through JDBC, 
      or by another application or server, the objects in the shared cache will be stale.
      -->
      <property name="eclipselink.cache.shared.default" value="false"/>
      <!--
      Specify your application server:
       
        JBoss: JBoss Application Server
        OC4J: OC4J persistence provider
        SAPNetWeaver_7_1: SAP NetWeaver Application Server 7.1 (and higher)
        SunAS9: Sun Application Server 9
        WebLogic: Oracle WebLogic Server
        WebLogic_10: Oracle WebLogic Server 10
        WebLogic_9: Oracle WebLogic Server 9
        WebSphere: IBM WebSphere
        WebSphere_6_1: IBM WebSphere 6.1
        WebSphere_7: IBM WebSphere 7
        Default (TargetServer.None)
        -->
      <property name="eclipselink.target-server" value="SunAS9"/>
      <!--
        Weaving is a technique of manipulating the byte-code of compiled Java classes. 
        The EclipseLink JPA persistence provider uses weaving to enhance both JPA entities 
        and Plain Old Java Object (POJO) classes for such things as lazy loading, 
        change tracking, fetch groups, and internal optimizations.
 
        Weaving can be performed either dynamically at runtime, when entities are loaded, 
        or statically at compile time by post-processing the entity .class files. 
        By default, EclipseLink uses dynamic weaving whenever possible. 
        This includes inside an Java EE 5/6 application server and in Java SE 
        when the EclipseLink agent is configured. Dynamic weaving is recommended as it is easy 
        to configure and does not require any changes to a project's build process.
        -->
      <property name="eclipselink.weaving" value="static"/>
      <property name="eclipselink.ddl-generation" value="drop-and-create-tables"/>
    </properties>
  </persistence-unit>
</persistence>
